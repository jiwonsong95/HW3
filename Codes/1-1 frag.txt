#version 430

struct LIGHT {
    vec4 position; // assume point or direction in EC in this example shader
    vec4 ambient_color, diffuse_color, specular_color;
    vec4 light_attenuation_factors; // compute this effect only if .w != 0.0f
    vec3 spot_direction;
    float spot_exponent;
    float spot_cutoff_angle;
    bool light_on;
};

struct MATERIAL {
    vec4 ambient_color;
    vec4 diffuse_color;
    vec4 specular_color;
    vec4 emissive_color;
    float specular_exponent;
};

uniform vec4 u_global_ambient_color;
#define NUMBER_OF_LIGHTS_SUPPORTED 100
uniform LIGHT u_light[NUMBER_OF_LIGHTS_SUPPORTED];
uniform MATERIAL u_material;

uniform sampler2D u_base_texture;
uniform bool u_flag_texture_mapping = true;

in vec3 v_position_EC;
in vec3 v_normal_EC;
in vec2 v_tex_coord;
layout (location = 0) out vec4 final_color;

const float zero_f = 0.0f;
const float one_f  = 1.0f;

vec4 lighting_equation_textured(in vec3 P_EC, in vec3 N_EC, in vec4 base_color) {
    vec4 color_sum = u_material.emissive_color 
                   + u_global_ambient_color * base_color;

    for (int i = 0; i < NUMBER_OF_LIGHTS_SUPPORTED; i++) {
        if (!u_light[i].light_on) continue;

        float local_scale_factor = one_f;
        vec3 L_EC;

        // --- 광원 위치/방향 처리 ---
        if (u_light[i].position.w != zero_f) { 
            // point light
            L_EC = u_light[i].position.xyz - P_EC.xyz;

            // --- 거리 감쇠 처리 ---
            if (u_light[i].light_attenuation_factors.w != zero_f) {
                vec4 tmp_vec4;
                tmp_vec4.x = one_f;
                tmp_vec4.z = dot(L_EC, L_EC); // distance^2
                tmp_vec4.y = sqrt(tmp_vec4.z); // distance
                tmp_vec4.w = zero_f;
                local_scale_factor = one_f / dot(tmp_vec4, u_light[i].light_attenuation_factors);
            }

            L_EC = normalize(L_EC);

            // --- 스포트라이트 처리 ---
            if (u_light[i].spot_cutoff_angle < 180.0f) {
                float spot_cutoff_angle = clamp(u_light[i].spot_cutoff_angle, zero_f, 90.0f);
                vec3 spot_dir = normalize(u_light[i].spot_direction);
                float tmp_float = dot(-L_EC, spot_dir);

                if (tmp_float >= cos(radians(spot_cutoff_angle))) {
                    tmp_float = pow(tmp_float, u_light[i].spot_exponent);
                } else {
                    tmp_float = zero_f;
                }
                local_scale_factor *= tmp_float;
            }
        } else {  
            // directional light
            L_EC = normalize(u_light[i].position.xyz);
        }

        // --- 최종 광원 계산 ---
        if (local_scale_factor > zero_f) {
            vec4 local_color_sum = u_light[i].ambient_color * u_material.ambient_color;

            float diff = dot(N_EC, L_EC);
            if (diff > zero_f) {
                // 디퓨즈
                local_color_sum += u_light[i].diffuse_color * base_color * diff;

                // **스페큘러 계산 수정** ----------------------
                // Eye coordinate에서의 카메라는 (0,0,0)이므로
                // 시선 벡터 V_EC = normalize(-P_EC) 
                vec3 V_EC = normalize(-P_EC);
                vec3 H_EC = normalize(L_EC + V_EC); 
                
                float spec = dot(N_EC, H_EC);
                if (spec > zero_f) {
                    spec = pow(spec, u_material.specular_exponent);
                    local_color_sum += u_light[i].specular_color
                                     * u_material.specular_color * spec;
                }
            }
            color_sum += local_scale_factor * local_color_sum;
        }
    }

    return color_sum;
}

void main(void) {
    // 텍스처를 사용한다고 가정
    vec4 base_color = texture(u_base_texture, v_tex_coord);
    final_color = lighting_equation_textured(v_position_EC, normalize(v_normal_EC), base_color);
}
